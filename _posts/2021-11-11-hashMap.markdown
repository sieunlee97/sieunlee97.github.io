---
title: HashMap<K,V>
categories:
- Java
last_modified_at: 2021-11-09T14:00:00+09:00
toc: true
---
## Map<K,V>
Map<K,V>를 구현하는 대표 클래스로 **HashMap<K,V>** 와 **TreeMap<K,V>** 가 있다. 
둘의 가장 큰 차이점은, 트리 자료구조를 기반으로 구현된 TreeMap<K,V>은 정렬상태를 유지한다는데 있다. 물론 정렬의 대상은 Value가 아니라 Key이다.

## HashMap<K,V>의 사용법

```java
import java.util.HashMap;

class HashMapCollection {
  public static void main(String[] args){
    HashMap<Integer, String> map = new HashMap<>();
    
    //Key-Value 기반의 데이터 저장
    map.put(45, "Brown");
    map.put(37, "James");
    map.put(23, "Martin");
    
    //데이터 탐색
    System.out.println("23번: " + map.get(23));
    System.out.println("37번: " + map.get(37));
    System.out.println("45번: " + map.get(45));
    System.out.println();
    
    //데이터 삭제
    map.remove(37);
    
    //데이터 삭제 확인
    ystem.out.println("37번: " + map.get(37));
  }
}
```

## HashMap<K,V>의 순차적 접근 방법

HashMap<K,V> 클래스는 Iterable<T> 인터페이스를 구현하지 않으니 for-each문을 통해서, 혹은 '반복자'를 얻어서 순차적 접근을 진행할 수 없다. 대신에 Map<K,V>에는 다음 메소드가 존재한다.<br>
  
``` public Set<K> keySet() ```
  
이 메소드는 Set<E>을 구현하는 컬렉션 인스턴스를 생성하고, 여기에 모든 Key를 담아서 반환한다. <br>
따라서 이 메소드를 통해 모든 Key를 따로 모으고, 이를 통한 순차적 접근을 진행할 수 있다.

```java
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

class HashMapCollection {
  public static void main(String[] args){
    HashMap<Integer, String> map = new HashMap<>();
    
    //Key-Value 기반의 데이터 저장
    map.put(45, "Brown");
    map.put(37, "James");
    map.put(23, "Martin");
    
    //Key만 담고 있는 컬렉션 인스턴스 생성
    Set<Integer> ks = map.keySet();
    
    //전체 Key 출력 (for-each문 기반)
    for(Integer n : ks) {
      System.out.println(n.toString());
    }
    
    //전체 Value 출력 (for-each문 기반)
    for(Integer n : ks) {
     System.out.println(map.get(n));
    }
  
    //전체 Value 출력 (반복자 기반)
    for(Iterator<Integer> itr = ks.iterator(); itr.hasNext(); ) {
      System.out.println(map.get(itr.next()));
    }
  }
}
```
  
``` Set<Integer> ks = map.keySet(); ```
  
Set<E>는 Iterable<E>을 상속하므로 위의 예제에서 보이듯이 위의 문장 실행 이후에 for-each문을 통해서, 또는 반복자를 얻어서 순차적 접근을 진행할 수 있다.
